
// <copyright file="SyncQuoteOrderPaymentWithShopPlugin.cs" company="">
// Copyright (c) 2023 All Rights Reserved
// </copyright>
// <author></author>
// <date>5/7/2023 9:59:32 AM</date>
// <summary>Implements the SyncQuoteOrderPaymentWithShopPlugin Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Globalization;
using System.ServiceModel;
using System.Web.Script.Serialization;
using KavirTire.Shop.KavirTire.Shop.Plugins.Core.Extensions;
using KavirTire.Shop.KavirTire.Shop.Plugins.Core.Resources;
using KavirTire.Shop.KavirTire.Shop.Plugins.Entities;
using KavirTire.Shop.KavirTire.Shop.Plugins.Enums;
using KavirTire.Shop.KavirTire.Shop.Plugins.Repositories;
using KavirTire.Shop.Plugins.Core;
using KavirTire.Shop.Plugins.Core.Enums;
using KavirTire.Shop.Plugins.Models;
using Microsoft.Xrm.Sdk;

namespace KavirTire.Shop.KavirTire.Shop.Plugins
{

    /// <summary>
    /// SyncQuoteOrderPaymentWithShopPlugin Plugin.
    /// </summary>    
    public class SyncQuoteOrderPaymentWithShopPlugin : PluginBase
    {
        public SyncQuoteOrderPaymentWithShopPlugin(string unsecure, string secure)
            : base(typeof(SyncQuoteOrderPaymentWithShopPlugin))
        {

            RegisterEvent();
        }

        private void RegisterEvent()
        {
            var SyncQuoteOrderPaymentWithShopPreEvent =
                new Tuple<int, string, string, Action<LocalPluginContext>>((int)PipelineStep.PostOperation, "bmsd_KavireTireSyncQuoteOrderPaymentWithShop",
                    null,
                    new Action<LocalPluginContext>(SyncQuoteOrderPaymentWithShopPostEventHandler));

            RegisteredEvents.Add(SyncQuoteOrderPaymentWithShopPreEvent);
        }

        private void SyncQuoteOrderPaymentWithShopPostEventHandler(LocalPluginContext context)
        {
            var jsonObj = (string)context.PluginExecutionContext.InputParameters["JsonObject"];
            var model = new JavaScriptSerializer().Deserialize<CrmQuote>(jsonObj);

            var quoteRepository = new QuoteRepository(context);
            var barcodeRepository = new QuoteRepository(context);
            var productRepository = new ProductRepository(context);
            var onlinePaymentRepository = new OnlinePaymentRepository(context);

            if (quoteRepository.GetByShopId(model.ShopId) != null)
                return;

            var quote = new Quote
            {
                PotentialCustomer = new EntityReference(PluginResource.Contact, model.CustomerId),
                PriceList = new EntityReference(PluginResource.PriceList, model.PriceListId),
                Name = $"{model.CustomerName} {model.RegistrationDate.ToPersianDate()}",
                ShopId = model.ShopId.ToString(),
                FreightAmount = new Money(model.TotalPostCost),
                TotalTax = model.Tax,
                TotalAmount = model.TotalCost,
                ExpiredDate = model.ExpirationDate,
                RegistrationDate = model.RegistrationDate

            };

            var quoteProducts = new List<QuoteProduct>();
            foreach (var item in model.QuoteProducts)
            {
                var product = productRepository.GetById(new EntityReference(PluginResource.Product, item.ProductId), new[] { PluginResource.Product_DefaultUnit });
                var quoteProductEntity = new QuoteProduct()
                {
                    Product = new EntityReference(PluginResource.Product, item.ProductId),
                    Unit = new EntityReference(PluginResource.Unit, product.DefaultUnit.Value.Id),
                    Quantity = item.Quantity,
                    PricePerUnit = item.Price
                };
                quoteProducts.Add(quoteProductEntity);

           
            }

            var quoteProductCollection = new EntityCollection();
            quoteProductCollection.Entities.AddRange(quoteProducts);

            quote.RelatedEntities.Add(new Relationship(PluginResource.QuoteProduct_Qute_RelationShip), quoteProductCollection);
            var quoteId = quoteRepository.Create(quote);

            var quoteRef = new EntityReference(PluginResource.Quote, quoteId);

            quoteRepository.SetState(quoteRef, new OptionSetValue((int)QuoteStatus.Active), new OptionSetValue((int)QuoteStatusReason.InProgress));
            if(model.Status == CrmQuoteStatus.Expired)
            {
                quoteRepository.CancelQuote(quoteRef);
            }
            else if (model.Status == CrmQuoteStatus.Closed && model.Payment != null)
            {
                quoteRepository.WonQuote(quoteRef);

                var orderId = quoteRepository.ConvertQuoteToOrder(quoteId);

                foreach (var item in model.QuoteProducts)
                {
                    var barcode = new Barcode()
                    {
                        Order = new EntityReference(PluginResource.Order, orderId),
                        Product = new EntityReference(PluginResource.Product, item.ProductId)
                    };
                    barcodeRepository.Create(barcode);
                }


                var newQuote = quoteRepository.GetById(new EntityReference(PluginResource.Quote, quoteId), new string[] { PluginResource.Quote_QuoteNumber });
                var payment = new OnlinePayment
                {
                    RefNo = model.Payment.RefNo,
                    SecurePan = model.Payment.SecurePan,
                    PaymentIdentity = model.Payment.PaymentIdentity,
                    SystemTraceNo = model.Payment.SystemTraceNo,
                    ResNo = newQuote.QuoteNumber,
                    ShopResNo = model.Payment.ShopResNo,
                    Amount = new Money(model.Payment.Amount),
                    RRN = model.Payment.RRN.ToString(),
                    Order = new EntityReference(PluginResource.Order,orderId),
                    Quote = new EntityReference(PluginResource.Quote,quoteId),
                    Ipg = new EntityReference(PluginResource.Ipg, model.Payment.IpgId),
                    BankAccount = new EntityReference(PluginResource.BankAccount, model.Payment.BankAccountId),
                    Customer = new EntityReference(PluginResource.Contact, model.CustomerId)
                };
                if (model.Payment?.PostBankAccountId != null)
                    payment.PostBankAccount = new EntityReference(PluginResource.BankAccount, model.Payment.PostBankAccountId.Value);


                var paymentLogs = new List<OnlinePaymentLog>();
                foreach (var item in model.Payment.PaymentLogs)
                {
                    var paymentLog = new OnlinePaymentLog()
                    {
                        Details = item.Details,
                        ErrorCode = item.ErrorCode,
                        Message = item.Message,
                        LogType = new OptionSetValue(item.Type)
                    };
                    paymentLogs.Add(paymentLog);
                }

                var paymentLogCollection = new EntityCollection();
                paymentLogCollection.Entities.AddRange(paymentLogs);
                payment.RelatedEntities.Add(new Relationship(PluginResource.OnlinePayment_OnlinePaymentLog_Relation), paymentLogCollection);

                onlinePaymentRepository.Create(payment);
            };
        }
    }
}
