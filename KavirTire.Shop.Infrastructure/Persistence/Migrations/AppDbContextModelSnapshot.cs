// <auto-generated />
using System;
using KavirTire.Shop.Infrastructure.Persistence.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KavirTire.Shop.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KavirTire.Shop.Domain.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CrmRowVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprovedForPurchase")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.GeneralPolicy.GeneralPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApplyMaximumNumberOfPurchases")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyNumberOfPurchaseItems")
                        .HasColumnType("bit");

                    b.Property<bool>("ApplyPurchaseInterval")
                        .HasColumnType("bit");

                    b.Property<int>("BasketExpirationInMin")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceExpirationMin")
                        .HasColumnType("int");

                    b.Property<int>("MaximumNumberOfPurchases")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPurchaseItems")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriceListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PurchaseInterval")
                        .HasColumnType("int");

                    b.Property<bool>("ShowProductsOnlyRelatedToCustomerCar")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.ToTable("GeneralPolicy");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.IPGs.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IpgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsPost")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IpgId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.IPGs.Ipg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcceptorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Bank")
                        .HasColumnType("int");

                    b.Property<int?>("DisableFromHour")
                        .HasColumnType("int");

                    b.Property<int?>("DisableFromMinute")
                        .HasColumnType("int");

                    b.Property<int?>("DisableToHour")
                        .HasColumnType("int");

                    b.Property<int?>("DisableToMinute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PostBankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RsaKeyValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ipg");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.InventoryItems.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InventoryForSale")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ReservedInventory")
                        .HasColumnType("int");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("Warehouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Invoices.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PostCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Invoices.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceStatus")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationPlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalInventoryItemCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalPostCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Vehicle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostCostCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostCostCategoryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.OrderHistory.OrderHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CrmRowVersion")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Payments.Entities.PaymentLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentLogs");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IpgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PostBankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RRN")
                        .HasColumnType("bigint");

                    b.Property<string>("RefNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurePan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SystemTraceNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.PostCostCategories.PostCostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TirePostCost")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("PostCostCategories");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.PriceLists.Entities.PriceListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("PriceListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceListItems");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.PriceLists.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PriceList");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Products.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.VehicleTypes.Entities.VehicleTypeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleTypeProducts");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.VehicleTypes.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RegistrationPlateCharacter")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationPlateNumberLeft")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationPlateNumberMiddle")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationPlateNumberRight")
                        .HasColumnType("int");

                    b.Property<Guid?>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.WebFiles.WebFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartialUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebFiles");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.WebPages.WebPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebPages");
                });

            modelBuilder.Entity("KavirTire.Shop.Infrastructure.Persistence.Audit.AuditEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits", (string)null);
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Customers.Customer", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Locations.Location", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.GeneralPolicy.GeneralPolicy", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.PriceLists.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId");

                    b.Navigation("PriceList");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.IPGs.Entities.BankAccount", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.IPGs.Ipg", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("IpgId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.InventoryItems.InventoryItem", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Products.Product", null)
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Invoices.Entities.InvoiceItem", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Invoices.Invoice", null)
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Locations.Location", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Locations.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("KavirTire.Shop.Domain.PostCostCategories.PostCostCategory", "PostCostCategory")
                        .WithMany()
                        .HasForeignKey("PostCostCategoryId");

                    b.Navigation("Parent");

                    b.Navigation("PostCostCategory");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.OrderHistory.OrderHistory", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Customers.Customer", null)
                        .WithMany("OrderHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Payments.Entities.PaymentLog", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Payments.Payment", null)
                        .WithMany("PaymentLogs")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.PriceLists.Entities.PriceListItem", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.PriceLists.PriceList", null)
                        .WithMany("PriceListItems")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("KavirTire.Shop.Domain.Products.Product", null)
                        .WithMany("PriceListItems")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Products.Entities.ProductImage", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Products.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.VehicleTypes.Entities.VehicleTypeProduct", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Products.Product", null)
                        .WithMany("VehicleTypeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KavirTire.Shop.Domain.VehicleTypes.VehicleType", null)
                        .WithMany("VehicleTypeProducts")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Vehicles.Vehicle", b =>
                {
                    b.HasOne("KavirTire.Shop.Domain.Customers.Customer", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId");

                    b.HasOne("KavirTire.Shop.Domain.VehicleTypes.VehicleType", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Customers.Customer", b =>
                {
                    b.Navigation("OrderHistory");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.IPGs.Ipg", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Invoices.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Locations.Location", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Payments.Payment", b =>
                {
                    b.Navigation("PaymentLogs");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.PriceLists.PriceList", b =>
                {
                    b.Navigation("PriceListItems");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.Products.Product", b =>
                {
                    b.Navigation("InventoryItems");

                    b.Navigation("PriceListItems");

                    b.Navigation("ProductImages");

                    b.Navigation("VehicleTypeProducts");
                });

            modelBuilder.Entity("KavirTire.Shop.Domain.VehicleTypes.VehicleType", b =>
                {
                    b.Navigation("VehicleTypeProducts");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
